TODO: b through g

Graph Tutorials 
a) Ways to represent a graph:
  1) Adjacency Matrix
  2) Adjacency List
b)BFS
c)DFS
d)Dijistra
e)Minimum Spanning Tree
f)Max Flow
g)Min Cost Max Flow

a) Graph objects
The two main stream ways of representing a graph requires slightly different ways of inplementing graph algorithms.
for visualization
https://www.geeksforgeeks.org/graph-and-its-representations/ 
1) Adjacency Matrix
Uses a 2d array to represent connections between two nodes
Benefit: easy to code, easy to input, not likely to have bugs
Weakness: memory intensive. Space Complexity O(n^2)

public class AdjMatrix{
        int[][] graph;
        public AdjMatrix(int size){
            graph = new int[size][size];
        }
        public void addEdge(int start, int dest){
            graph[start][dest] = 1;
            graph[dest][start] = 1;
        }
        public void addWeightedEdge(int start, int dest, int weight){
            graph[start][dest] = weight;
            graph[dest][start] = weight;
        }
        public boolean hasEdge(int start, int dest){
            return(graph[start][dest]!=0);
        }
        //other methods
    }

2) Adjacency List
Each "node" has a list of other nodes which it has paths to.
Benefit: memory is O(E)
Weakness: Looking up a path can be expensive

static class Graph 
    { 
        int V; 
        LinkedList<Integer> adjListArray[]; 
          
        // constructor  
        Graph(int V) 
        { 
            this.V = V; 
              
            // define the size of array as  
            // number of vertices 
            adjListArray = new LinkedList[V]; 
              
            // Create a new list for each vertex 
            // such that adjacent nodes can be stored 
            for(int i = 0; i < V ; i++){ 
                adjListArray[i] = new LinkedList<>(); 
            } 
        } 
    } 
  
